"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withExpo = void 0;
const webpack_1 = require("webpack");
function withExpo(nextConfig = {}) {
    return {
        ...nextConfig,
        webpack(config, options) {
            var _a, _b;
            // Mix in aliases
            if (!config.resolve) {
                config.resolve = {};
            }
            config.resolve.alias = {
                ...(config.resolve.alias || {}),
                // Alias direct react-native imports to react-native-web
                'react-native$': 'react-native-web',
                // Alias internal react-native modules to react-native-web
                'react-native/Libraries/EventEmitter/RCTDeviceEventEmitter$': 'react-native-web/dist/vendor/react-native/NativeEventEmitter/RCTDeviceEventEmitter',
                'react-native/Libraries/vendor/emitter/EventEmitter$': 'react-native-web/dist/vendor/react-native/emitter/EventEmitter',
                'react-native/Libraries/EventEmitter/NativeEventEmitter$': 'react-native-web/dist/vendor/react-native/NativeEventEmitter',
            };
            config.resolve.extensions = [
                '.web.js',
                '.web.jsx',
                '.web.ts',
                '.web.tsx',
                ...((_b = (_a = config.resolve) === null || _a === void 0 ? void 0 : _a.extensions) !== null && _b !== void 0 ? _b : []),
            ];
            if (!config.plugins) {
                config.plugins = [];
            }
            // Expose __DEV__ from Metro.
            config.plugins.push(new webpack_1.DefinePlugin({
                __DEV__: JSON.stringify(process.env.NODE_ENV !== 'production'),
            }));
            // Execute the user-defined webpack config.
            if (typeof nextConfig.webpack === 'function') {
                return nextConfig.webpack(config, options);
            }
            return config;
        },
    };
}
exports.withExpo = withExpo;
//# sourceMappingURL=index.js.map
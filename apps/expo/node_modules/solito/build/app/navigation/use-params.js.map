{"version":3,"file":"use-params.js","sourceRoot":"","sources":["../../../src/app/navigation/use-params.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAA;AACvC,OAAO,aAAa,MAAM,mBAAmB,CAAA;AAC7C,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAA;AAIjD,MAAM,UAAU,SAAS,CAKvB,YAGI,EAAE;IAUN,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,aAAa,EAAa,CAAA;KAClC;IAED,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAA;IAExB,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,CAAC,KAAK,CACX,2CAA2C,QAAQ,CAAC,EAAE,gDAAgD,CACvG,CAAA;KACF;IAED,OAAO,KAAK,EAAE,MAAiB,CAAA;AACjC,CAAC","sourcesContent":["import { Platform } from 'react-native'\nimport useNextParams from './use-next-params'\nimport { useRoute } from '../../params/use-route'\n\ntype OrArray<Type> = Type | Type[]\n\nexport function useParams<\n  Type extends Record<string, OrArray<string | number | boolean>>,\n  TypesSettings extends 'enforce-safety' | 'ignore-safety' = 'enforce-safety',\n  CatchAllSegments extends Partial<Record<keyof Type, true>> = {}\n>(\n  _settings: {\n    types?: TypesSettings\n    catchAllSegments?: CatchAllSegments\n  } = {}\n) {\n  type Returns = {\n    // people need to manually type check that it's not an array or a string, since the URL could provide this\n    [Key in keyof Type]: TypesSettings extends 'ignore-safety'\n      ? Type[Key]\n      : Key extends keyof CatchAllSegments\n      ? Array<string | Type[Key]>\n      : Type[Key] | string\n  }\n  if (Platform.OS === 'web') {\n    return useNextParams() as Returns\n  }\n\n  const route = useRoute()\n\n  if (!route) {\n    console.error(\n      `[useParams] route is undefined. Is your ${Platform.OS} app properly configured for React Navigation?`\n    )\n  }\n\n  return route?.params as Returns\n}\n"]}
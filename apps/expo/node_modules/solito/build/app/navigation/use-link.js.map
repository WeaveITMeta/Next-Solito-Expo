{"version":3,"file":"use-link.js","sourceRoot":"","sources":["../../../src/app/navigation/use-link.ts"],"names":[],"mappings":"AAAA,OAAO,EAAyB,QAAQ,EAAE,MAAM,cAAc,CAAA;AAE9D,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAExC,MAAM,UAAU,OAAO,CAAC,EACtB,IAAI,EACJ,OAAO,EACP,YAAY,GAI4C;IACxD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAA;IAE1B,0GAA0G;IAC1G,MAAM,OAAO,GAAG,CACd,CAA2E,EAC3E,EAAE;QACF,IAAI,YAAY,GAAG,KAAK,CAAA;QAExB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,CAAC,CAAC,EAAE;YAC/B,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAA;SAC9C;aAAM,IACL,CAAC,CAAC,CAAC,gBAAgB,IAAI,4BAA4B;YACnD,2EAA2E;YAC3E,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,mCAAmC;YAC1F,2EAA2E;YAC3E,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,oCAAoC;YAC5E,2EAA2E;YAC3E,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,0CAA0C;UAC1G;YACA,CAAC,CAAC,cAAc,EAAE,CAAA;YAClB,YAAY,GAAG,IAAI,CAAA;SACpB;QAED,IAAI,YAAY,EAAE;YAChB,IAAI,IAAI,KAAK,GAAG,EAAE;gBAChB,gDAAgD;gBAChD,+BAA+B;gBAC/B,OAAM;aACP;YACD,IAAI,OAAO,EAAE;gBACX,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,CAAC,CAAA;aACvC;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aAClB;SACF;IACH,CAAC,CAAA;IAED,OAAO;QACL,iBAAiB,EAAE,MAAe;QAClC,OAAO;QACP,IAAI;KACL,CAAA;AACH,CAAC","sourcesContent":["import { GestureResponderEvent, Platform } from 'react-native'\n\nimport { useRouter } from './use-router'\n\nexport function useLink({\n  href,\n  replace,\n  experimental,\n}: {\n  href: string\n  replace?: boolean\n} & Parameters<ReturnType<typeof useRouter>['replace']>[1]) {\n  const router = useRouter()\n\n  // https://github.com/react-navigation/react-navigation/blob/main/packages/native/src/useLinkProps.tsx#L64\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault()\n      shouldHandle = true\n    }\n\n    if (shouldHandle) {\n      if (href === '#') {\n        // this is a way on web to stay on the same page\n        // useful for conditional hrefs\n        return\n      }\n      if (replace) {\n        router.replace(href, { experimental })\n      } else {\n        router.push(href)\n      }\n    }\n  }\n\n  return {\n    accessibilityRole: 'link' as const,\n    onPress,\n    href,\n  }\n}\n"]}
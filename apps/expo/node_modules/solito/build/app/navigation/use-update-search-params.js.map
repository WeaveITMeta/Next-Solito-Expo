{"version":3,"file":"use-update-search-params.js","sourceRoot":"","sources":["../../../src/app/navigation/use-update-search-params.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAA;AACnC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAIxC,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAA;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AAEjD,MAAM,CAAC,OAAO;IAGZ,MAAM,MAAM,GAAG,SAAS,EAAE,CAAA;IAC1B,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAA;IAC9B,MAAM,YAAY,GAAG,eAAe,EAAE,CAAA;IAEtC,OAAO,WAAW,CAChB,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QAClB,MAAM,IAAI,GAAG,IAAI,eAAe,CAAC,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAA;QAE1D,IAAI,aAAa,GAAG,KAAK,CAAA;QACzB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC9C,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACjB,aAAa,GAAG,IAAI,CAAA;aACrB;YACD,IAAI,KAAK,IAAI,IAAI,EAAE;gBACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;aACjB;iBAAM;gBACL,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;aACrB;QACH,CAAC,CAAC,CAAA;QACF,MAAM,MAAM,GACV,MAAM,CAAC,OAAO,EAAE,WAAW,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAA;QAEtE,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACxC,MAAM,CAAC,GAAG,QAAQ,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IACtE,CAAC,EACD,CAAC,MAAM,CAAC,CACT,CAAA;AACH,CAAC","sourcesContent":["import { useCallback } from 'react'\nimport { useRouter } from './use-router'\nimport { useNavigation } from '../../router/use-navigation'\nimport { Platform } from 'react-native'\nimport { UseUpdateSearchParamsReturns } from './use-update-search-params.types'\nimport { usePathname } from './use-pathname'\nimport { useSearchParams } from 'next/navigation'\n\nexport default function <\n  Type extends Record<string, string> = Record<string, string>\n>(): UseUpdateSearchParamsReturns<Type> {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  return useCallback(\n    (params, options) => {\n      const next = new URLSearchParams(searchParams?.toString())\n\n      let shouldReplace = false\n      Object.entries(params).forEach(([key, value]) => {\n        if (next.has(key)) {\n          shouldReplace = true\n        }\n        if (value == null) {\n          next.delete(key)\n        } else {\n          next.set(key, value)\n        }\n      })\n      const action =\n        router[options?.webBehavior ?? (shouldReplace ? 'replace' : 'push')]\n\n      const stringifiedNext = next.toString();\n      action(`${pathname}${stringifiedNext ? `?${stringifiedNext}` : ''}`)\n    },\n    [router]\n  )\n}\n"]}